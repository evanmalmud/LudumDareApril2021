using UnityEngine;
using TMPro;

// Shapes © Freya Holmér - https://twitter.com/FreyaHolmer/
// Website & Documentation - https://acegikmo.com/shapes/
namespace Shapes {

	// this file is auto-generated by CodegenDrawOverloads
	public static partial class Draw {
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param>
		public static void Line( Vector3 start, Vector3 end ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, Color, Color, LineThickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="color">The color of the line</param>
		public static void Line( Vector3 start, Vector3 end, Color color ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, color, color, LineThickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void Line( Vector3 start, Vector3 end, Color colorStart, Color colorEnd ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, colorStart, colorEnd, LineThickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param>
		public static void Line( Vector3 start, Vector3 end, float thickness ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, Color, Color, thickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="color">The color of the line</param>
		public static void Line( Vector3 start, Vector3 end, float thickness, Color color ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, color, color, thickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void Line( Vector3 start, Vector3 end, float thickness, Color colorStart, Color colorEnd ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, colorStart, colorEnd, thickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="endCaps">The type of end caps to use</param>
		public static void Line( Vector3 start, Vector3 end, LineEndCap endCaps ) => Line_Internal( endCaps, LineThicknessSpace, start, end, Color, Color, LineThickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="endCaps">The type of end caps to use</param><param name="color">The color of the line</param>
		public static void Line( Vector3 start, Vector3 end, LineEndCap endCaps, Color color ) => Line_Internal( endCaps, LineThicknessSpace, start, end, color, color, LineThickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="endCaps">The type of end caps to use</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void Line( Vector3 start, Vector3 end, LineEndCap endCaps, Color colorStart, Color colorEnd ) => Line_Internal( endCaps, LineThicknessSpace, start, end, colorStart, colorEnd, LineThickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param>
		public static void Line( Vector3 start, Vector3 end, float thickness, LineEndCap endCaps ) => Line_Internal( endCaps, LineThicknessSpace, start, end, Color, Color, thickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param><param name="color">The color of the line</param>
		public static void Line( Vector3 start, Vector3 end, float thickness, LineEndCap endCaps, Color color ) => Line_Internal( endCaps, LineThicknessSpace, start, end, color, color, thickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void Line( Vector3 start, Vector3 end, float thickness, LineEndCap endCaps, Color colorStart, Color colorEnd ) => Line_Internal( endCaps, LineThicknessSpace, start, end, colorStart, colorEnd, thickness, null );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param>
		public static void LineDashed( Vector3 start, Vector3 end ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, Color, Color, LineThickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="color">The color of the line</param>
		public static void LineDashed( Vector3 start, Vector3 end, Color color ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, color, color, LineThickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void LineDashed( Vector3 start, Vector3 end, Color colorStart, Color colorEnd ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, colorStart, colorEnd, LineThickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param>
		public static void LineDashed( Vector3 start, Vector3 end, float thickness ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, Color, Color, thickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="color">The color of the line</param>
		public static void LineDashed( Vector3 start, Vector3 end, float thickness, Color color ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, color, color, thickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void LineDashed( Vector3 start, Vector3 end, float thickness, Color colorStart, Color colorEnd ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, colorStart, colorEnd, thickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="endCaps">The type of end caps to use</param>
		public static void LineDashed( Vector3 start, Vector3 end, LineEndCap endCaps ) => Line_Internal( endCaps, LineThicknessSpace, start, end, Color, Color, LineThickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="endCaps">The type of end caps to use</param><param name="color">The color of the line</param>
		public static void LineDashed( Vector3 start, Vector3 end, LineEndCap endCaps, Color color ) => Line_Internal( endCaps, LineThicknessSpace, start, end, color, color, LineThickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="endCaps">The type of end caps to use</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void LineDashed( Vector3 start, Vector3 end, LineEndCap endCaps, Color colorStart, Color colorEnd ) => Line_Internal( endCaps, LineThicknessSpace, start, end, colorStart, colorEnd, LineThickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param>
		public static void LineDashed( Vector3 start, Vector3 end, float thickness, LineEndCap endCaps ) => Line_Internal( endCaps, LineThicknessSpace, start, end, Color, Color, thickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param><param name="color">The color of the line</param>
		public static void LineDashed( Vector3 start, Vector3 end, float thickness, LineEndCap endCaps, Color color ) => Line_Internal( endCaps, LineThicknessSpace, start, end, color, color, thickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void LineDashed( Vector3 start, Vector3 end, float thickness, LineEndCap endCaps, Color colorStart, Color colorEnd ) => Line_Internal( endCaps, LineThicknessSpace, start, end, colorStart, colorEnd, thickness, LineDashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, Color, Color, LineThickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="color">The color of the line</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, Color color ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, color, color, LineThickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, Color colorStart, Color colorEnd ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, colorStart, colorEnd, LineThickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="thickness">The thickness of the line</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, float thickness ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, Color, Color, thickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="thickness">The thickness of the line</param><param name="color">The color of the line</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, float thickness, Color color ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, color, color, thickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="thickness">The thickness of the line</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, float thickness, Color colorStart, Color colorEnd ) => Line_Internal( LineEndCaps, LineThicknessSpace, start, end, colorStart, colorEnd, thickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="endCaps">The type of end caps to use</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, LineEndCap endCaps ) => Line_Internal( endCaps, LineThicknessSpace, start, end, Color, Color, LineThickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="endCaps">The type of end caps to use</param><param name="color">The color of the line</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, LineEndCap endCaps, Color color ) => Line_Internal( endCaps, LineThicknessSpace, start, end, color, color, LineThickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="endCaps">The type of end caps to use</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, LineEndCap endCaps, Color colorStart, Color colorEnd ) => Line_Internal( endCaps, LineThicknessSpace, start, end, colorStart, colorEnd, LineThickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, float thickness, LineEndCap endCaps ) => Line_Internal( endCaps, LineThicknessSpace, start, end, Color, Color, thickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param><param name="color">The color of the line</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, float thickness, LineEndCap endCaps, Color color ) => Line_Internal( endCaps, LineThicknessSpace, start, end, color, color, thickness, dashStyle );
		/// <summary>Draws a line from start to end</summary><param name="start">The starting point of this line</param><param name="end">The endpoint of this line</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="thickness">The thickness of the line</param><param name="endCaps">The type of end caps to use</param><param name="colorStart">The color at the starting point</param><param name="colorEnd">The color at the endpoint</param>
		public static void LineDashed( Vector3 start, Vector3 end, DashStyle dashStyle, float thickness, LineEndCap endCaps, Color colorStart, Color colorEnd ) => Line_Internal( endCaps, LineThicknessSpace, start, end, colorStart, colorEnd, thickness, dashStyle );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param>
		public static void Polyline( PolylinePath path ) => Polyline_Internal( path, false, PolylineGeometry, PolylineJoins, LineThickness, LineThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param>
		public static void Polyline( PolylinePath path, bool closed ) => Polyline_Internal( path, closed, PolylineGeometry, PolylineJoins, LineThickness, LineThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="thickness">The thickness of the polyline</param>
		public static void Polyline( PolylinePath path, float thickness ) => Polyline_Internal( path, false, PolylineGeometry, PolylineJoins, thickness, LineThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="thickness">The thickness of the polyline</param>
		public static void Polyline( PolylinePath path, bool closed, float thickness ) => Polyline_Internal( path, closed, PolylineGeometry, PolylineJoins, thickness, LineThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="joins">What type of joins to use</param>
		public static void Polyline( PolylinePath path, PolylineJoins joins ) => Polyline_Internal( path, false, PolylineGeometry, joins, LineThickness, LineThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="joins">What type of joins to use</param>
		public static void Polyline( PolylinePath path, bool closed, PolylineJoins joins ) => Polyline_Internal( path, closed, PolylineGeometry, joins, LineThickness, LineThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="thickness">The thickness of the polyline</param><param name="joins">What type of joins to use</param>
		public static void Polyline( PolylinePath path, float thickness, PolylineJoins joins ) => Polyline_Internal( path, false, PolylineGeometry, joins, thickness, LineThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="thickness">The thickness of the polyline</param><param name="joins">What type of joins to use</param>
		public static void Polyline( PolylinePath path, bool closed, float thickness, PolylineJoins joins ) => Polyline_Internal( path, closed, PolylineGeometry, joins, thickness, LineThicknessSpace, Color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="color">The color of the polyline</param>
		public static void Polyline( PolylinePath path, Color color ) => Polyline_Internal( path, false, PolylineGeometry, PolylineJoins, LineThickness, LineThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="color">The color of the polyline</param>
		public static void Polyline( PolylinePath path, bool closed, Color color ) => Polyline_Internal( path, closed, PolylineGeometry, PolylineJoins, LineThickness, LineThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="thickness">The thickness of the polyline</param><param name="color">The color of the polyline</param>
		public static void Polyline( PolylinePath path, float thickness, Color color ) => Polyline_Internal( path, false, PolylineGeometry, PolylineJoins, thickness, LineThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="thickness">The thickness of the polyline</param><param name="color">The color of the polyline</param>
		public static void Polyline( PolylinePath path, bool closed, float thickness, Color color ) => Polyline_Internal( path, closed, PolylineGeometry, PolylineJoins, thickness, LineThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="joins">What type of joins to use</param><param name="color">The color of the polyline</param>
		public static void Polyline( PolylinePath path, PolylineJoins joins, Color color ) => Polyline_Internal( path, false, PolylineGeometry, joins, LineThickness, LineThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="joins">What type of joins to use</param><param name="color">The color of the polyline</param>
		public static void Polyline( PolylinePath path, bool closed, PolylineJoins joins, Color color ) => Polyline_Internal( path, closed, PolylineGeometry, joins, LineThickness, LineThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="thickness">The thickness of the polyline</param><param name="joins">What type of joins to use</param><param name="color">The color of the polyline</param>
		public static void Polyline( PolylinePath path, float thickness, PolylineJoins joins, Color color ) => Polyline_Internal( path, false, PolylineGeometry, joins, thickness, LineThicknessSpace, color );
		/// <summary>Draws a polyline, given an existing polyline path</summary><param name="path">The path to use when drawing. Note: be sure to call myPolylinePath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="closed">Whether or not this polyline should be a closed loop</param><param name="thickness">The thickness of the polyline</param><param name="joins">What type of joins to use</param><param name="color">The color of the polyline</param>
		public static void Polyline( PolylinePath path, bool closed, float thickness, PolylineJoins joins, Color color ) => Polyline_Internal( path, closed, PolylineGeometry, joins, thickness, LineThicknessSpace, color );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param>
		public static void Polygon( PolygonPath path ) => Polygon_Internal( path, PolygonTriangulation, Color, null );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="color">The color of the polygon</param>
		public static void Polygon( PolygonPath path, Color color ) => Polygon_Internal( path, PolygonTriangulation, color, null );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="triangulation">The triangulation method to use. Some of these are computationally faster than others, but only works for certain shapes</param>
		public static void Polygon( PolygonPath path, PolygonTriangulation triangulation ) => Polygon_Internal( path, triangulation, Color, null );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="triangulation">The triangulation method to use. Some of these are computationally faster than others, but only works for certain shapes</param><param name="color">The color of the polygon</param>
		public static void Polygon( PolygonPath path, PolygonTriangulation triangulation, Color color ) => Polygon_Internal( path, triangulation, color, null );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param>
		public static void PolygonFill( PolygonPath path ) => Polygon_Internal( path, PolygonTriangulation, Color, PolygonShapeFill );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="fill">The color fill style to use</param>
		public static void PolygonFill( PolygonPath path, ShapeFill fill ) => Polygon_Internal( path, PolygonTriangulation, Color, fill );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="triangulation">The triangulation method to use. Some of these are computationally faster than others, but only works for certain shapes</param>
		public static void PolygonFill( PolygonPath path, PolygonTriangulation triangulation ) => Polygon_Internal( path, triangulation, Color, PolygonShapeFill );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="triangulation">The triangulation method to use. Some of these are computationally faster than others, but only works for certain shapes</param><param name="fill">The color fill style to use</param>
		public static void PolygonFill( PolygonPath path, PolygonTriangulation triangulation, ShapeFill fill ) => Polygon_Internal( path, triangulation, Color, fill );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void PolygonFillLinear( PolygonPath path, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => Polygon_Internal( path, PolygonTriangulation, Color, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="triangulation">The triangulation method to use. Some of these are computationally faster than others, but only works for certain shapes</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void PolygonFillLinear( PolygonPath path, PolygonTriangulation triangulation, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => Polygon_Internal( path, triangulation, Color, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void PolygonFillRadial( PolygonPath path, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => Polygon_Internal( path, PolygonTriangulation, Color, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a simple polygon, given an existing polygon path</summary><param name="path">The path to use when drawing. Note: Be be sure to call myPolygonPath.Dispose() when you are done with it, or use it inside of using-statements</param><param name="triangulation">The triangulation method to use. Some of these are computationally faster than others, but only works for certain shapes</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void PolygonFillRadial( PolygonPath path, PolygonTriangulation triangulation, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => Polygon_Internal( path, triangulation, Color, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygon( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygon( Vector3 pos, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygon( Vector3 pos, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygon( Vector3 pos, int sideCount ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygon( Vector3 pos, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygon( Vector3 pos, int sideCount, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, int sideCount, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygon( Vector3 pos, int sideCount, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, int sideCount, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary>
		public static void RegularPolygon() => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, color, false, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygon( float radius ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( float radius, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygon( float radius, float angle ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( float radius, float angle, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, 0f, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygon( float radius, float angle, float roundness ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( float radius, float angle, float roundness, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, false, roundness, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygon( int sideCount ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( int sideCount, Color color ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, color, false, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygon( int sideCount, float radius ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( int sideCount, float radius, Color color ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygon( int sideCount, float radius, float angle ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( int sideCount, float radius, float angle, Color color ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, 0f, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygon( int sideCount, float radius, float angle, float roundness ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygon( int sideCount, float radius, float angle, float roundness, Color color ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, false, roundness, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollow( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollow( Vector3 pos, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollow( Vector3 pos, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollow( Vector3 pos, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonHollow( Vector3 pos, int sideCount ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollow( Vector3 pos, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollow( Vector3 pos, int sideCount, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, int sideCount, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollow( Vector3 pos, int sideCount, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, int sideCount, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollow( Vector3 pos, int sideCount, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, int sideCount, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, int sideCount, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, int sideCount, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, 0f, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, float roundness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, color, true, roundness, angle, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary>
		public static void RegularPolygonHollow() => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollow( float radius ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( float radius, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollow( float radius, float thickness ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( float radius, float thickness, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollow( float radius, float thickness, float angle ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( float radius, float thickness, float angle, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, 0f, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollow( float radius, float thickness, float angle, float roundness ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( float radius, float thickness, float angle, float roundness, Color color ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, color, true, roundness, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonHollow( int sideCount ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( int sideCount, Color color ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollow( int sideCount, float radius ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( int sideCount, float radius, Color color ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollow( int sideCount, float radius, float thickness ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( int sideCount, float radius, float thickness, Color color ) => RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, 0f, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollow( int sideCount, float radius, float thickness, float angle ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( int sideCount, float radius, float thickness, float angle, Color color ) => RegularPolygon_Internal( sideCount, radius, thickness, color, true, 0f, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollow( int sideCount, float radius, float thickness, float angle, float roundness ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the regular polygon</param>
		public static void RegularPolygonHollow( int sideCount, float radius, float thickness, float angle, float roundness, Color color ) => RegularPolygon_Internal( sideCount, radius, thickness, color, true, roundness, angle, null );
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param>
		public static void RegularPolygonFill( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonFill( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonFill( Vector3 pos, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, float radius, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonFill( Vector3 pos, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, float radius, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonFill( Vector3 pos, int sideCount ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, int sideCount, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonFill( Vector3 pos, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, int sideCount, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonFill( Vector3 pos, int sideCount, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, int sideCount, float radius, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonFill( Vector3 pos, int sideCount, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, int sideCount, float radius, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, float radius, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, float radius, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, int sideCount, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, int sideCount, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, float radius, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, float radius, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, int sideCount, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, int sideCount, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary>
		public static void RegularPolygonFill() => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( ShapeFill fill ) => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonFill( float radius ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( float radius, ShapeFill fill ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonFill( float radius, float angle ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( float radius, float angle, ShapeFill fill ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, fill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonFill( float radius, float angle, float roundness ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( float radius, float angle, float roundness, ShapeFill fill ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, fill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonFill( int sideCount ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( int sideCount, ShapeFill fill ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonFill( int sideCount, float radius ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( int sideCount, float radius, ShapeFill fill ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, fill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonFill( int sideCount, float radius, float angle ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( int sideCount, float radius, float angle, ShapeFill fill ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, fill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonFill( int sideCount, float radius, float angle, float roundness ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonFill( int sideCount, float radius, float angle, float roundness, ShapeFill fill ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, fill );
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param>
		public static void RegularPolygonHollowFill( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollowFill( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollowFill( Vector3 pos, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, float radius, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollowFill( Vector3 pos, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, float radius, float thickness, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollowFill( Vector3 pos, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, float radius, float thickness, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonHollowFill( Vector3 pos, int sideCount ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, int sideCount, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollowFill( Vector3 pos, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, int sideCount, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollowFill( Vector3 pos, int sideCount, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, int sideCount, float radius, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollowFill( Vector3 pos, int sideCount, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, int sideCount, float radius, float thickness, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollowFill( Vector3 pos, int sideCount, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, int sideCount, float radius, float thickness, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, float radius, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, int sideCount, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, int sideCount, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, float radius, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, int sideCount ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, int sideCount, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, int sideCount, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, int sideCount, float radius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, float roundness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, float roundness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary>
		public static void RegularPolygonHollowFill() => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( ShapeFill fill ) => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollowFill( float radius ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( float radius, ShapeFill fill ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollowFill( float radius, float thickness ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( float radius, float thickness, ShapeFill fill ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, fill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollowFill( float radius, float thickness, float angle ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( float radius, float thickness, float angle, ShapeFill fill ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, fill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollowFill( float radius, float thickness, float angle, float roundness ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( float radius, float thickness, float angle, float roundness, ShapeFill fill ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, fill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param>
		public static void RegularPolygonHollowFill( int sideCount ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( int sideCount, ShapeFill fill ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param>
		public static void RegularPolygonHollowFill( int sideCount, float radius ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( int sideCount, float radius, ShapeFill fill ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, fill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param>
		public static void RegularPolygonHollowFill( int sideCount, float radius, float thickness ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( int sideCount, float radius, float thickness, ShapeFill fill ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, fill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param>
		public static void RegularPolygonHollowFill( int sideCount, float radius, float thickness, float angle ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( int sideCount, float radius, float thickness, float angle, ShapeFill fill ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, fill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void RegularPolygonHollowFill( int sideCount, float radius, float thickness, float angle, float roundness ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, PolygonShapeFill );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fill">The color fill style to use</param>
		public static void RegularPolygonHollowFill( int sideCount, float radius, float thickness, float angle, float roundness, ShapeFill fill ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, fill );
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, float radius, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, float radius, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, int sideCount, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, int sideCount, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, int sideCount, float radius, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, int sideCount, float radius, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Vector3 normal, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Vector3 normal, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Vector3 normal, float radius, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Vector3 normal, float radius, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Vector3 normal, int sideCount, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Vector3 normal, int sideCount, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Quaternion rot, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Quaternion rot, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Quaternion rot, float radius, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Quaternion rot, float radius, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Quaternion rot, int sideCount, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Quaternion rot, int sideCount, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( float radius, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( float radius, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( int sideCount, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( int sideCount, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( int sideCount, float radius, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillLinear( int sideCount, float radius, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, float radius, float thickness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, float radius, float thickness, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, float radius, float thickness, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, int sideCount, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, int sideCount, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, int sideCount, float radius, float thickness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, int sideCount, float radius, float thickness, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, int sideCount, float radius, float thickness, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 normal, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 normal, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 normal, float radius, float thickness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 normal, int sideCount, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 normal, int sideCount, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Quaternion rot, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Quaternion rot, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Quaternion rot, float radius, float thickness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Quaternion rot, int sideCount, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Quaternion rot, int sideCount, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( float radius, float thickness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( float radius, float thickness, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( float radius, float thickness, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( int sideCount, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( int sideCount, float radius, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( int sideCount, float radius, float thickness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( int sideCount, float radius, float thickness, float angle, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillStart">The start position of the linear gradient</param><param name="fillEnd">The end position of the linear gradient</param><param name="fillColorStart">The start color of the linear gradient</param><param name="fillColorEnd">The end color of the linear gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillLinear( int sideCount, float radius, float thickness, float angle, float roundness, Vector3 fillStart, Vector3 fillEnd, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateLinear( fillStart, fillEnd, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, float radius, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, float radius, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, int sideCount, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, int sideCount, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, int sideCount, float radius, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, int sideCount, float radius, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Vector3 normal, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Vector3 normal, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Vector3 normal, float radius, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Vector3 normal, float radius, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Vector3 normal, int sideCount, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Vector3 normal, int sideCount, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Vector3 normal, int sideCount, float radius, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Quaternion rot, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Quaternion rot, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Quaternion rot, float radius, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Quaternion rot, float radius, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Quaternion rot, int sideCount, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Quaternion rot, int sideCount, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 pos, Quaternion rot, int sideCount, float radius, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( float radius, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( float radius, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( int sideCount, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( int sideCount, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( int sideCount, float radius, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonFillRadial( int sideCount, float radius, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, false, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, float radius, float thickness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, float radius, float thickness, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, float radius, float thickness, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, int sideCount, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, int sideCount, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, int sideCount, float radius, float thickness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, int sideCount, float radius, float thickness, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, int sideCount, float radius, float thickness, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 normal, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 normal, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 normal, float radius, float thickness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 normal, float radius, float thickness, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 normal, int sideCount, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 normal, int sideCount, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="normal">The normal direction of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Vector3 normal, int sideCount, float radius, float thickness, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Quaternion rot, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Quaternion rot, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Quaternion rot, float radius, float thickness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Quaternion rot, float radius, float thickness, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Quaternion rot, int sideCount, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Quaternion rot, int sideCount, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="pos">The position of the regular polygon</param><param name="rot">The orientation of the regular polygon</param><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 pos, Quaternion rot, int sideCount, float radius, float thickness, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
			Draw.PopMatrix();
		}
		/// <summary>Draws a regular polygon</summary><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( float radius, float thickness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( float radius, float thickness, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( float radius, float thickness, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( RegularPolygonSideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( int sideCount, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, RegularPolygonRadius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( int sideCount, float radius, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, RegularPolygonThickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( int sideCount, float radius, float thickness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, 0f, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( int sideCount, float radius, float thickness, float angle, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, 0f, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a regular polygon</summary><param name="sideCount">Number of sides of this regular polygon. 3 = triangle, 5 = pentagon, 6 = hexagon, and so on!</param><param name="radius">The radius from center to vertex</param><param name="thickness">The thickness of the border</param><param name="angle">Angular offset in radians</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="fillOrigin">The center of the radial gradient</param><param name="fillRadius">The radius of the radial gradient</param><param name="fillColorStart">The inner color of the radial gradient</param><param name="fillColorEnd">The outer color of the radial gradient</param><param name="fillSpace">Whether the gradient should be drawn in local space or world space</param>
		public static void RegularPolygonHollowFillRadial( int sideCount, float radius, float thickness, float angle, float roundness, Vector3 fillOrigin, float fillRadius, Color fillColorStart, Color fillColorEnd, FillSpace fillSpace = FillSpace.Local ) => RegularPolygon_Internal( sideCount, radius, thickness, Color, true, roundness, angle, ShapeFill.CreateRadial( fillOrigin, fillRadius, fillColorStart, fillColorEnd, fillSpace ) );
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param>
		public static void Disc( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( DiscRadius, Color, Color, Color, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="color">The color of the disc</param>
		public static void Disc( Vector3 pos, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( DiscRadius, color, color, color, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="radius">The radius of this disc</param>
		public static void Disc( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( radius, Color, Color, Color, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="radius">The radius of this disc</param><param name="color">The color of the disc</param>
		public static void Disc( Vector3 pos, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( radius, color, color, color, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param>
		public static void Disc( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( DiscRadius, Color, Color, Color, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="color">The color of the disc</param>
		public static void Disc( Vector3 pos, Vector3 normal, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( DiscRadius, color, color, color, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="radius">The radius of this disc</param>
		public static void Disc( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( radius, Color, Color, Color, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="radius">The radius of this disc</param><param name="color">The color of the disc</param>
		public static void Disc( Vector3 pos, Vector3 normal, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( radius, color, color, color, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param>
		public static void Disc( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( DiscRadius, Color, Color, Color, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="color">The color of the disc</param>
		public static void Disc( Vector3 pos, Quaternion rot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( DiscRadius, color, color, color, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="radius">The radius of this disc</param>
		public static void Disc( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( radius, Color, Color, Color, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="radius">The radius of this disc</param><param name="color">The color of the disc</param>
		public static void Disc( Vector3 pos, Quaternion rot, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( radius, color, color, color, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary>
		public static void Disc() => Disc_Internal( DiscRadius, Color, Color, Color, Color );
		/// <summary>Draws a solid filled disc</summary><param name="color">The color of the disc</param>
		public static void Disc( Color color ) => Disc_Internal( DiscRadius, color, color, color, color );
		/// <summary>Draws a solid filled disc</summary><param name="radius">The radius of this disc</param>
		public static void Disc( float radius ) => Disc_Internal( radius, Color, Color, Color, Color );
		/// <summary>Draws a solid filled disc</summary><param name="radius">The radius of this disc</param><param name="color">The color of the disc</param>
		public static void Disc( float radius, Color color ) => Disc_Internal( radius, color, color, color, color );
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void DiscGradientRadial( Vector3 pos, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( DiscRadius, colorInner, colorOuter, colorInner, colorOuter );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="radius">The radius of this disc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void DiscGradientRadial( Vector3 pos, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( radius, colorInner, colorOuter, colorInner, colorOuter );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void DiscGradientRadial( Vector3 pos, Vector3 normal, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( DiscRadius, colorInner, colorOuter, colorInner, colorOuter );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="radius">The radius of this disc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void DiscGradientRadial( Vector3 pos, Vector3 normal, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( radius, colorInner, colorOuter, colorInner, colorOuter );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void DiscGradientRadial( Vector3 pos, Quaternion rot, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( DiscRadius, colorInner, colorOuter, colorInner, colorOuter );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="radius">The radius of this disc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void DiscGradientRadial( Vector3 pos, Quaternion rot, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( radius, colorInner, colorOuter, colorInner, colorOuter );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void DiscGradientRadial( Color colorInner, Color colorOuter ) => Disc_Internal( DiscRadius, colorInner, colorOuter, colorInner, colorOuter );
		/// <summary>Draws a solid filled disc</summary><param name="radius">The radius of this disc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void DiscGradientRadial( float radius, Color colorInner, Color colorOuter ) => Disc_Internal( radius, colorInner, colorOuter, colorInner, colorOuter );
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void DiscGradientAngular( Vector3 pos, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( DiscRadius, colorStart, colorStart, colorEnd, colorEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="radius">The radius of this disc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void DiscGradientAngular( Vector3 pos, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( radius, colorStart, colorStart, colorEnd, colorEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void DiscGradientAngular( Vector3 pos, Vector3 normal, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( DiscRadius, colorStart, colorStart, colorEnd, colorEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="radius">The radius of this disc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void DiscGradientAngular( Vector3 pos, Vector3 normal, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( radius, colorStart, colorStart, colorEnd, colorEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void DiscGradientAngular( Vector3 pos, Quaternion rot, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( DiscRadius, colorStart, colorStart, colorEnd, colorEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="radius">The radius of this disc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void DiscGradientAngular( Vector3 pos, Quaternion rot, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( radius, colorStart, colorStart, colorEnd, colorEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void DiscGradientAngular( Color colorStart, Color colorEnd ) => Disc_Internal( DiscRadius, colorStart, colorStart, colorEnd, colorEnd );
		/// <summary>Draws a solid filled disc</summary><param name="radius">The radius of this disc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void DiscGradientAngular( float radius, Color colorStart, Color colorEnd ) => Disc_Internal( radius, colorStart, colorStart, colorEnd, colorEnd );
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void DiscGradientBilinear( Vector3 pos, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( DiscRadius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="radius">The radius of this disc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void DiscGradientBilinear( Vector3 pos, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Disc_Internal( radius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void DiscGradientBilinear( Vector3 pos, Vector3 normal, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( DiscRadius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="normal">The normal direction of the disc</param><param name="radius">The radius of this disc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void DiscGradientBilinear( Vector3 pos, Vector3 normal, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Disc_Internal( radius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void DiscGradientBilinear( Vector3 pos, Quaternion rot, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( DiscRadius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="pos">The position of the disc</param><param name="rot">The orientation of the disc</param><param name="radius">The radius of this disc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void DiscGradientBilinear( Vector3 pos, Quaternion rot, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Disc_Internal( radius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled disc</summary><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void DiscGradientBilinear( Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Disc_Internal( DiscRadius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd );
		/// <summary>Draws a solid filled disc</summary><param name="radius">The radius of this disc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void DiscGradientBilinear( float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Disc_Internal( radius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd );
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param>
		public static void Ring( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="color">The color of the ring</param>
		public static void Ring( Vector3 pos, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, color, color, color, color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param>
		public static void Ring( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, Color, Color, Color, Color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void Ring( Vector3 pos, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, color, color, color, color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void Ring( Vector3 pos, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, Color, Color, Color, Color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void Ring( Vector3 pos, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, color, color, color, color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param>
		public static void Ring( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="color">The color of the ring</param>
		public static void Ring( Vector3 pos, Vector3 normal, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, color, color, color, color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param>
		public static void Ring( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, Color, Color, Color, Color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void Ring( Vector3 pos, Vector3 normal, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, color, color, color, color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void Ring( Vector3 pos, Vector3 normal, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, Color, Color, Color, Color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void Ring( Vector3 pos, Vector3 normal, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, color, color, color, color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param>
		public static void Ring( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="color">The color of the ring</param>
		public static void Ring( Vector3 pos, Quaternion rot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, color, color, color, color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param>
		public static void Ring( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, Color, Color, Color, Color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void Ring( Vector3 pos, Quaternion rot, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, color, color, color, color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void Ring( Vector3 pos, Quaternion rot, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, Color, Color, Color, Color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void Ring( Vector3 pos, Quaternion rot, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, color, color, color, color, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary>
		public static void Ring() => Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, null );
		/// <summary>Draws a ring (circle)</summary><param name="color">The color of the ring</param>
		public static void Ring( Color color ) => Ring_Internal( DiscRadius, RingThickness, color, color, color, color, null );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param>
		public static void Ring( float radius ) => Ring_Internal( radius, RingThickness, Color, Color, Color, Color, null );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void Ring( float radius, Color color ) => Ring_Internal( radius, RingThickness, color, color, color, color, null );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void Ring( float radius, float thickness ) => Ring_Internal( radius, thickness, Color, Color, Color, Color, null );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void Ring( float radius, float thickness, Color color ) => Ring_Internal( radius, thickness, color, color, color, color, null );
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param>
		public static void RingDashed( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, color, color, color, color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param>
		public static void RingDashed( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, Color, Color, Color, Color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, color, color, color, color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void RingDashed( Vector3 pos, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, Color, Color, Color, Color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, color, color, color, color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param>
		public static void RingDashed( Vector3 pos, DashStyle dashStyle ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, DashStyle dashStyle, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, color, color, color, color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param>
		public static void RingDashed( Vector3 pos, DashStyle dashStyle, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, Color, Color, Color, Color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, DashStyle dashStyle, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, color, color, color, color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void RingDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, Color, Color, Color, Color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, color, color, color, color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, color, color, color, color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, Color, Color, Color, Color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, color, color, color, color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, Color, Color, Color, Color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, color, color, color, color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, color, color, color, color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, Color, Color, Color, Color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, color, color, color, color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, Color, Color, Color, Color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, color, color, color, color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, color, color, color, color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, Color, Color, Color, Color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, color, color, color, color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, Color, Color, Color, Color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, color, color, color, color, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, color, color, color, color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, Color, Color, Color, Color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, color, color, color, color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, Color, Color, Color, Color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, color, color, color, color, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary>
		public static void RingDashed() => Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="color">The color of the ring</param>
		public static void RingDashed( Color color ) => Ring_Internal( DiscRadius, RingThickness, color, color, color, color, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param>
		public static void RingDashed( float radius ) => Ring_Internal( radius, RingThickness, Color, Color, Color, Color, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( float radius, Color color ) => Ring_Internal( radius, RingThickness, color, color, color, color, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void RingDashed( float radius, float thickness ) => Ring_Internal( radius, thickness, Color, Color, Color, Color, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( float radius, float thickness, Color color ) => Ring_Internal( radius, thickness, color, color, color, color, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param>
		public static void RingDashed( DashStyle dashStyle ) => Ring_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="color">The color of the ring</param>
		public static void RingDashed( DashStyle dashStyle, Color color ) => Ring_Internal( DiscRadius, RingThickness, color, color, color, color, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param>
		public static void RingDashed( DashStyle dashStyle, float radius ) => Ring_Internal( radius, RingThickness, Color, Color, Color, Color, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( DashStyle dashStyle, float radius, Color color ) => Ring_Internal( radius, RingThickness, color, color, color, color, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param>
		public static void RingDashed( DashStyle dashStyle, float radius, float thickness ) => Ring_Internal( radius, thickness, Color, Color, Color, Color, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="color">The color of the ring</param>
		public static void RingDashed( DashStyle dashStyle, float radius, float thickness, Color color ) => Ring_Internal( radius, thickness, color, color, color, color, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( Vector3 pos, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( Vector3 pos, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( Vector3 pos, float radius, float thickness, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( Vector3 pos, Vector3 normal, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( Vector3 pos, Vector3 normal, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( Vector3 pos, Vector3 normal, float radius, float thickness, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( Vector3 pos, Quaternion rot, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( Vector3 pos, Quaternion rot, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( Vector3 pos, Quaternion rot, float radius, float thickness, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( Color colorInner, Color colorOuter ) => Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, null );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( float radius, Color colorInner, Color colorOuter ) => Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, null );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadial( float radius, float thickness, Color colorInner, Color colorOuter ) => Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, null );
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, float radius, float thickness, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, DashStyle dashStyle, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, DashStyle dashStyle, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Vector3 normal, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Vector3 normal, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Vector3 normal, float radius, float thickness, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Quaternion rot, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Quaternion rot, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Quaternion rot, float radius, float thickness, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( Color colorInner, Color colorOuter ) => Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( float radius, Color colorInner, Color colorOuter ) => Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( float radius, float thickness, Color colorInner, Color colorOuter ) => Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( DashStyle dashStyle, Color colorInner, Color colorOuter ) => Ring_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( DashStyle dashStyle, float radius, Color colorInner, Color colorOuter ) => Ring_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void RingGradientRadialDashed( DashStyle dashStyle, float radius, float thickness, Color colorInner, Color colorOuter ) => Ring_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( Vector3 pos, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( Vector3 pos, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( Vector3 pos, float radius, float thickness, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( Vector3 pos, Vector3 normal, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( Vector3 pos, Vector3 normal, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( Vector3 pos, Vector3 normal, float radius, float thickness, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( Vector3 pos, Quaternion rot, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( Vector3 pos, Quaternion rot, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( Vector3 pos, Quaternion rot, float radius, float thickness, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( Color colorStart, Color colorEnd ) => Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, null );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( float radius, Color colorStart, Color colorEnd ) => Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, null );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngular( float radius, float thickness, Color colorStart, Color colorEnd ) => Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, null );
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, float radius, float thickness, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, DashStyle dashStyle, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, DashStyle dashStyle, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Vector3 normal, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Vector3 normal, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Vector3 normal, float radius, float thickness, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Quaternion rot, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Quaternion rot, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Quaternion rot, float radius, float thickness, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( Color colorStart, Color colorEnd ) => Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( float radius, Color colorStart, Color colorEnd ) => Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( float radius, float thickness, Color colorStart, Color colorEnd ) => Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( DashStyle dashStyle, Color colorStart, Color colorEnd ) => Ring_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( DashStyle dashStyle, float radius, Color colorStart, Color colorEnd ) => Ring_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void RingGradientAngularDashed( DashStyle dashStyle, float radius, float thickness, Color colorStart, Color colorEnd ) => Ring_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( Vector3 pos, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( Vector3 pos, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( Vector3 pos, float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( Vector3 pos, Vector3 normal, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( Vector3 pos, Vector3 normal, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( Vector3 pos, Vector3 normal, float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( Vector3 pos, Quaternion rot, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( Vector3 pos, Quaternion rot, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( Vector3 pos, Quaternion rot, float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinear( float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, null );
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, DashStyle dashStyle, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, DashStyle dashStyle, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Vector3 normal, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Vector3 normal, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Vector3 normal, float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="normal">The normal direction of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Quaternion rot, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Quaternion rot, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Quaternion rot, float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="pos">The position of the ring</param><param name="rot">The orientation of the ring</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a ring (circle)</summary><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, RingDashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( DashStyle dashStyle, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Ring_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( DashStyle dashStyle, float radius, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Ring_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
		/// <summary>Draws a ring (circle)</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this ring</param><param name="thickness">The thickness of the ring</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void RingGradientBilinearDashed( DashStyle dashStyle, float radius, float thickness, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Ring_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, dashStyle );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		public static void Pie( Vector3 pos, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( DiscRadius, Color, Color, Color, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="color">The color of the pie</param>
		public static void Pie( Vector3 pos, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( DiscRadius, color, color, color, color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		public static void Pie( Vector3 pos, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( radius, Color, Color, Color, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="color">The color of the pie</param>
		public static void Pie( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( radius, color, color, color, color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		public static void Pie( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( DiscRadius, Color, Color, Color, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="color">The color of the pie</param>
		public static void Pie( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( DiscRadius, color, color, color, color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		public static void Pie( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( radius, Color, Color, Color, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="color">The color of the pie</param>
		public static void Pie( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( radius, color, color, color, color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		public static void Pie( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( DiscRadius, Color, Color, Color, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="color">The color of the pie</param>
		public static void Pie( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( DiscRadius, color, color, color, color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		public static void Pie( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( radius, Color, Color, Color, Color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="color">The color of the pie</param>
		public static void Pie( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( radius, color, color, color, color, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		public static void Pie( float angleRadStart, float angleRadEnd ) => Pie_Internal( DiscRadius, Color, Color, Color, Color, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="color">The color of the pie</param>
		public static void Pie( float angleRadStart, float angleRadEnd, Color color ) => Pie_Internal( DiscRadius, color, color, color, color, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param>
		public static void Pie( float radius, float angleRadStart, float angleRadEnd ) => Pie_Internal( radius, Color, Color, Color, Color, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="color">The color of the pie</param>
		public static void Pie( float radius, float angleRadStart, float angleRadEnd, Color color ) => Pie_Internal( radius, color, color, color, color, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void PieGradientRadial( Vector3 pos, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( DiscRadius, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void PieGradientRadial( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( radius, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void PieGradientRadial( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( DiscRadius, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void PieGradientRadial( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( radius, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void PieGradientRadial( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( DiscRadius, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void PieGradientRadial( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( radius, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void PieGradientRadial( float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Pie_Internal( DiscRadius, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void PieGradientRadial( float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Pie_Internal( radius, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void PieGradientAngular( Vector3 pos, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( DiscRadius, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void PieGradientAngular( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( radius, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void PieGradientAngular( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( DiscRadius, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void PieGradientAngular( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( radius, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void PieGradientAngular( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( DiscRadius, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void PieGradientAngular( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( radius, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void PieGradientAngular( float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Pie_Internal( DiscRadius, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void PieGradientAngular( float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Pie_Internal( radius, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void PieGradientBilinear( Vector3 pos, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( DiscRadius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void PieGradientBilinear( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Pie_Internal( radius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void PieGradientBilinear( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( DiscRadius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="normal">The normal direction of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void PieGradientBilinear( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Pie_Internal( radius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void PieGradientBilinear( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( DiscRadius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="pos">The position of the pie</param><param name="rot">The orientation of the pie</param><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void PieGradientBilinear( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Pie_Internal( radius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd );
			Draw.PopMatrix();
		}
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void PieGradientBilinear( float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Pie_Internal( DiscRadius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd );
		/// <summary>Draws a solid filled pie shape, using start/end angles</summary><param name="radius">The radius of this pie</param><param name="angleRadStart">The start angle of the pie, in radians</param><param name="angleRadEnd">The end angle of the pie, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void PieGradientBilinear( float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Pie_Internal( radius, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( Vector3 pos, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( Vector3 pos, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( float angleRadStart, float angleRadEnd ) => Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( float angleRadStart, float angleRadEnd, Color color ) => Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) => Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( float radius, float angleRadStart, float angleRadEnd ) => Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( float radius, float angleRadStart, float angleRadEnd, Color color ) => Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) => Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void Arc( float radius, float thickness, float angleRadStart, float angleRadEnd ) => Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void Arc( float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) => Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void Arc( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void Arc( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) => Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( float angleRadStart, float angleRadEnd ) => Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( float angleRadStart, float angleRadEnd, Color color ) => Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) => Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( float radius, float angleRadStart, float angleRadEnd ) => Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( float radius, float angleRadStart, float angleRadEnd, Color color ) => Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) => Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( float radius, float thickness, float angleRadStart, float angleRadEnd ) => Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) => Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) => Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( DashStyle dashStyle, float angleRadStart, float angleRadEnd ) => Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color color ) => Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( DiscRadius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) => Arc_Internal( DiscRadius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd ) => Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color color ) => Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( radius, RingThickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) => Arc_Internal( radius, RingThickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param>
		public static void ArcDashed( DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd ) => Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="color">The color of the arc</param>
		public static void ArcDashed( DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color color ) => Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param>
		public static void ArcDashed( DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps ) => Arc_Internal( radius, thickness, Color, Color, Color, Color, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="color">The color of the arc</param>
		public static void ArcDashed( DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color color ) => Arc_Internal( radius, thickness, color, color, color, color, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) => Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) => Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadial( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) => Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) => Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) => Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) => Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) => Arc_Internal( DiscRadius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) => Arc_Internal( radius, RingThickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInner, Color colorOuter ) => Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInner">The color of the inner side of the gradient</param><param name="colorOuter">The color of the outer side of the gradient</param>
		public static void ArcGradientRadialDashed( DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInner, Color colorOuter ) => Arc_Internal( radius, thickness, colorInner, colorOuter, colorInner, colorOuter, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) => Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) => Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngular( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) => Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) => Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) => Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) => Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) => Arc_Internal( DiscRadius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) => Arc_Internal( radius, RingThickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorStart, Color colorEnd ) => Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorStart">The color at the start angle of the gradient</param><param name="colorEnd">The color at the end angle of the gradient</param>
		public static void ArcGradientAngularDashed( DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorStart, Color colorEnd ) => Arc_Internal( radius, thickness, colorStart, colorStart, colorEnd, colorEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinear( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, null );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="normal">The normal direction of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Vector3 normal, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="pos">The position of the arc</param><param name="rot">The orientation of the arc</param><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( Vector3 pos, Quaternion rot, DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
			Draw.PopMatrix();
		}
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, RingDashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( DashStyle dashStyle, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( DashStyle dashStyle, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( DiscRadius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( DashStyle dashStyle, float radius, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, RingThickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, ArcEndCap.None, dashStyle );
		/// <summary>Draws a circular arc, using start/end angles</summary><param name="dashStyle">The configuration of how to display the dashes</param><param name="radius">The radius of this arc</param><param name="thickness">The thickness of the arc</param><param name="angleRadStart">The start angle of the arc, in radians</param><param name="angleRadEnd">The end angle of the arc, in radians</param><param name="endCaps">What type of end caps to use on the arc</param><param name="colorInnerStart">The color on the inner side at the start angle</param><param name="colorOuterStart">The color on the outer side at the start angle</param><param name="colorInnerEnd">The color on the inner side at the end angle</param><param name="colorOuterEnd">The color on the outer side at the end angle</param>
		public static void ArcGradientBilinearDashed( DashStyle dashStyle, float radius, float thickness, float angleRadStart, float angleRadEnd, ArcEndCap endCaps, Color colorInnerStart, Color colorOuterStart, Color colorInnerEnd, Color colorOuterEnd ) => Arc_Internal( radius, thickness, colorInnerStart, colorOuterStart, colorInnerEnd, colorOuterEnd, angleRadStart, angleRadEnd, endCaps, dashStyle );
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param>
		public static void Rectangle( Vector3 pos, Rect rect ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Rect rect, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Rect rect, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Rect rect, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Rect rect, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Rect rect, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Rect rect, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Rect rect, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param>
		public static void Rectangle( Vector3 pos, Vector2 size ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector2 size, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Vector2 size, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector2 size, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Vector2 size, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector2 size, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param>
		public static void Rectangle( Vector3 pos, float width, float height ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, float width, float height, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, float width, float height, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, float width, float height, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, float width, float height, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, float width, float height, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param>
		public static void Rectangle( Rect rect ) => Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, null );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Rect rect, Color color ) => Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, default, null );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Rect rect, float cornerRadius ) => Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Rect rect, float cornerRadius, Color color ) => Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Rect rect, Vector4 cornerRadii ) => Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, null );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Rect rect, Vector4 cornerRadii, Color color ) => Rectangle_Internal( BlendMode, false, rect, color, RectangleThickness, cornerRadii, null );
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector2 size, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, float width, float height, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, RectangleThickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void Rectangle( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), color, RectangleThickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Rect rect, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Rect rect, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Rect rect, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Rect rect, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Rect rect, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Rect rect, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Rect rect, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Rect rect, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Rect rect, float thickness ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, null );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Rect rect, float thickness, Color color ) => Rectangle_Internal( BlendMode, true, rect, color, thickness, default, null );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Rect rect, float thickness, float cornerRadius ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Rect rect, float thickness, float cornerRadius, Color color ) => Rectangle_Internal( BlendMode, true, rect, color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Rect rect, float thickness, Vector4 cornerRadii ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, null );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Rect rect, float thickness, Vector4 cornerRadii, Color color ) => Rectangle_Internal( BlendMode, true, rect, color, thickness, cornerRadii, null );
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, default, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, float cornerRadius, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="color">The color of the rectangle</param>
		public static void RectangleBorder( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), color, thickness, cornerRadii, null );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param>
		public static void RectangleFill( Vector3 pos, Rect rect ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Rect rect, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Rect rect, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Rect rect, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Rect rect, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Rect rect, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Rect rect ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Rect rect, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Rect rect, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Rect rect, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Rect rect, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Rect rect, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Rect rect ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Rect rect, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Rect rect, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Rect rect, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Rect rect, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Rect rect, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param>
		public static void RectangleFill( Vector3 pos, Vector2 size ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param>
		public static void RectangleFill( Vector3 pos, float width, float height ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, float width, float height, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, float width, float height, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, float width, float height, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, float width, float height, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, float width, float height, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( size ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, RectPivot.Center.GetRect( width, height ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param>
		public static void RectangleFill( Rect rect ) => Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, PolygonShapeFill );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Rect rect, ShapeFill fill ) => Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, default, fill );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Rect rect, float cornerRadius ) => Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Rect rect, float cornerRadius, ShapeFill fill ) => Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Rect rect, Vector4 cornerRadii ) => Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, PolygonShapeFill );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Rect rect, Vector4 cornerRadii, ShapeFill fill ) => Rectangle_Internal( BlendMode, false, rect, Color, RectangleThickness, cornerRadii, fill );
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, RectPivot pivot, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, RectPivot pivot, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector2 size, RectPivot pivot, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void RectangleFill( Vector3 pos, float width, float height, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, float width, float height, RectPivot pivot, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, float width, float height, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, float width, float height, RectPivot pivot, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, float width, float height, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, float width, float height, RectPivot pivot, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( size ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, false, pivot.GetRect( width, height ), Color, RectangleThickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Rect rect, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Rect rect, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Rect rect, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Rect rect, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Rect rect, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Rect rect, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Rect rect, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Rect rect, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Rect rect, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Rect rect, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Rect rect, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Rect rect, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Rect rect, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Rect rect, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Rect rect, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Rect rect, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Rect rect, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Rect rect, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( size ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, RectPivot.Center.GetRect( width, height ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Rect rect, float thickness ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, PolygonShapeFill );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Rect rect, float thickness, ShapeFill fill ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, default, fill );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Rect rect, float thickness, float cornerRadius ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Rect rect, float thickness, float cornerRadius, ShapeFill fill ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Rect rect, float thickness, Vector4 cornerRadii ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, PolygonShapeFill );
		/// <summary>Draws a rectangle with a given size</summary><param name="rect">The shape of the rectangle in local space</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Rect rect, float thickness, Vector4 cornerRadii, ShapeFill fill ) => Rectangle_Internal( BlendMode, true, rect, Color, thickness, cornerRadii, fill );
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, RectPivot pivot, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, RectPivot pivot, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="normal">The normal direction of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Vector3 normal, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="size">The size of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, Vector2 size, RectPivot pivot, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( size ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, default, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, float cornerRadius ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadius">The radius of rounded corners</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, float cornerRadius, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, new Vector4( cornerRadius, cornerRadius, cornerRadius, cornerRadius ), fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii, PolygonShapeFill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a rectangle with a given size</summary><param name="pos">The position of the rectangle</param><param name="rot">The orientation of the rectangle</param><param name="width">The width of the rectangle in local space</param><param name="height">The height of the rectangle in local space</param><param name="pivot">Set where the pivot of this rectangle should be</param><param name="thickness">The thickness of the rectangular border</param><param name="cornerRadii">The radius for each corner when rounded. The order is clockwise from the bottom left</param><param name="fill">The color fill style to use</param>
		public static void RectangleBorderFill( Vector3 pos, Quaternion rot, float width, float height, RectPivot pivot, float thickness, Vector4 cornerRadii, ShapeFill fill ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Rectangle_Internal( BlendMode, true, pivot.GetRect( width, height ), Color, thickness, cornerRadii, fill );
			Draw.PopMatrix();
		}
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param>
		public static void Triangle( Vector3 a, Vector3 b, Vector3 c ) => Triangle_Internal( a, b, c, false, TriangleThickness, 0f, Color, Color, Color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="color">The color of the triangle</param>
		public static void Triangle( Vector3 a, Vector3 b, Vector3 c, Color color ) => Triangle_Internal( a, b, c, false, TriangleThickness, 0f, color, color, color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param>
		public static void Triangle( Vector3 a, Vector3 b, Vector3 c, Color colorA, Color colorB, Color colorC ) => Triangle_Internal( a, b, c, false, TriangleThickness, 0f, colorA, colorB, colorC );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void Triangle( Vector3 a, Vector3 b, Vector3 c, float roundness ) => Triangle_Internal( a, b, c, false, TriangleThickness, roundness, Color, Color, Color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the triangle</param>
		public static void Triangle( Vector3 a, Vector3 b, Vector3 c, float roundness, Color color ) => Triangle_Internal( a, b, c, false, TriangleThickness, roundness, color, color, color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param>
		public static void Triangle( Vector3 a, Vector3 b, Vector3 c, float roundness, Color colorA, Color colorB, Color colorC ) => Triangle_Internal( a, b, c, false, TriangleThickness, roundness, colorA, colorB, colorC );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param>
		public static void TriangleHollow( Vector3 a, Vector3 b, Vector3 c ) => Triangle_Internal( a, b, c, true, TriangleThickness, 0f, Color, Color, Color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="color">The color of the triangle</param>
		public static void TriangleHollow( Vector3 a, Vector3 b, Vector3 c, Color color ) => Triangle_Internal( a, b, c, true, TriangleThickness, 0f, color, color, color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param>
		public static void TriangleHollow( Vector3 a, Vector3 b, Vector3 c, Color colorA, Color colorB, Color colorC ) => Triangle_Internal( a, b, c, true, TriangleThickness, 0f, colorA, colorB, colorC );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param>
		public static void TriangleHollow( Vector3 a, Vector3 b, Vector3 c, float thickness ) => Triangle_Internal( a, b, c, true, thickness, 0f, Color, Color, Color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param><param name="color">The color of the triangle</param>
		public static void TriangleHollow( Vector3 a, Vector3 b, Vector3 c, float thickness, Color color ) => Triangle_Internal( a, b, c, true, thickness, 0f, color, color, color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param>
		public static void TriangleHollow( Vector3 a, Vector3 b, Vector3 c, float thickness, Color colorA, Color colorB, Color colorC ) => Triangle_Internal( a, b, c, true, thickness, 0f, colorA, colorB, colorC );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param>
		public static void TriangleHollow( Vector3 a, Vector3 b, Vector3 c, float thickness, float roundness ) => Triangle_Internal( a, b, c, true, thickness, roundness, Color, Color, Color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="color">The color of the triangle</param>
		public static void TriangleHollow( Vector3 a, Vector3 b, Vector3 c, float thickness, float roundness, Color color ) => Triangle_Internal( a, b, c, true, thickness, roundness, color, color, color );
		/// <summary>Draws a triangle with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="thickness">The thickness of the border</param><param name="roundness">A value from 0 to 1 setting how rounded the corners should be. 0 means sharp, 1 means fully rounded</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param>
		public static void TriangleHollow( Vector3 a, Vector3 b, Vector3 c, float thickness, float roundness, Color colorA, Color colorB, Color colorC ) => Triangle_Internal( a, b, c, true, thickness, roundness, colorA, colorB, colorC );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param>
		public static void Quad( Vector3 a, Vector3 b, Vector3 c ) => Quad_Internal( a, b, c, a + ( c - b ), Color, Color, Color, Color );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="color">The color of the quad</param>
		public static void Quad( Vector3 a, Vector3 b, Vector3 c, Color color ) => Quad_Internal( a, b, c, a + ( c - b ), color, color, color, color );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param><param name="colorD">The color of the fourth point</param>
		public static void Quad( Vector3 a, Vector3 b, Vector3 c, Color colorA, Color colorB, Color colorC, Color colorD ) => Quad_Internal( a, b, c, a + ( c - b ), colorA, colorB, colorC, colorD );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="d">The position of the fourth point</param>
		public static void Quad( Vector3 a, Vector3 b, Vector3 c, Vector3 d ) => Quad_Internal( a, b, c, d, Color, Color, Color, Color );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="d">The position of the fourth point</param><param name="color">The color of the quad</param>
		public static void Quad( Vector3 a, Vector3 b, Vector3 c, Vector3 d, Color color ) => Quad_Internal( a, b, c, d, color, color, color, color );
		/// <summary>Draws a quad with arbitrary vertex positions and colors</summary><param name="a">The position of the first point</param><param name="b">The position of the second point</param><param name="c">The position of the third point</param><param name="d">The position of the fourth point</param><param name="colorA">The color of the first point</param><param name="colorB">The color of the second point</param><param name="colorC">The color of the third point</param><param name="colorD">The color of the fourth point</param>
		public static void Quad( Vector3 a, Vector3 b, Vector3 c, Vector3 d, Color colorA, Color colorB, Color colorC, Color colorD ) => Quad_Internal( a, b, c, d, colorA, colorB, colorC, colorD );
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="pos">The position of the sphere</param>
		public static void Sphere( Vector3 pos ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Sphere_Internal( SphereRadius, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="pos">The position of the sphere</param><param name="radius">The radius of this sphere</param>
		public static void Sphere( Vector3 pos, float radius ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Sphere_Internal( radius, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="pos">The position of the sphere</param><param name="color">The color of the sphere</param>
		public static void Sphere( Vector3 pos, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Sphere_Internal( SphereRadius, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="pos">The position of the sphere</param><param name="radius">The radius of this sphere</param><param name="color">The color of the sphere</param>
		public static void Sphere( Vector3 pos, float radius, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Sphere_Internal( radius, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D sphere with a given radius</summary>
		public static void Sphere() => Sphere_Internal( SphereRadius, Color );
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="radius">The radius of this sphere</param>
		public static void Sphere( float radius ) => Sphere_Internal( radius, Color );
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="color">The color of the sphere</param>
		public static void Sphere( Color color ) => Sphere_Internal( SphereRadius, color );
		/// <summary>Draws a 3D sphere with a given radius</summary><param name="radius">The radius of this sphere</param><param name="color">The color of the sphere</param>
		public static void Sphere( float radius, Color color ) => Sphere_Internal( radius, color );
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="size"></param>
		public static void Cuboid( Vector3 pos, Vector3 size ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cuboid_Internal( size, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="size"></param><param name="color">The color of the cuboid</param>
		public static void Cuboid( Vector3 pos, Vector3 size, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cuboid_Internal( size, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="normal">The normal direction of the cuboid</param><param name="size"></param>
		public static void Cuboid( Vector3 pos, Vector3 normal, Vector3 size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cuboid_Internal( size, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="normal">The normal direction of the cuboid</param><param name="size"></param><param name="color">The color of the cuboid</param>
		public static void Cuboid( Vector3 pos, Vector3 normal, Vector3 size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cuboid_Internal( size, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="rot">The orientation of the cuboid</param><param name="size"></param>
		public static void Cuboid( Vector3 pos, Quaternion rot, Vector3 size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cuboid_Internal( size, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="pos">The position of the cuboid</param><param name="rot">The orientation of the cuboid</param><param name="size"></param><param name="color">The color of the cuboid</param>
		public static void Cuboid( Vector3 pos, Quaternion rot, Vector3 size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cuboid_Internal( size, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="size"></param>
		public static void Cuboid( Vector3 size ) => Cuboid_Internal( size, Color );
		/// <summary>Draws a 3D cuboid with a given size</summary><param name="size"></param><param name="color">The color of the cuboid</param>
		public static void Cuboid( Vector3 size, Color color ) => Cuboid_Internal( size, color );
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="size"></param>
		public static void Cube( Vector3 pos, float size ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cuboid_Internal( new Vector3( size, size, size ), Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="size"></param><param name="color">The color of the cube</param>
		public static void Cube( Vector3 pos, float size, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cuboid_Internal( new Vector3( size, size, size ), color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="normal">The normal direction of the cube</param><param name="size"></param>
		public static void Cube( Vector3 pos, Vector3 normal, float size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cuboid_Internal( new Vector3( size, size, size ), Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="normal">The normal direction of the cube</param><param name="size"></param><param name="color">The color of the cube</param>
		public static void Cube( Vector3 pos, Vector3 normal, float size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cuboid_Internal( new Vector3( size, size, size ), color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="rot">The orientation of the cube</param><param name="size"></param>
		public static void Cube( Vector3 pos, Quaternion rot, float size ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cuboid_Internal( new Vector3( size, size, size ), Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="pos">The position of the cube</param><param name="rot">The orientation of the cube</param><param name="size"></param><param name="color">The color of the cube</param>
		public static void Cube( Vector3 pos, Quaternion rot, float size, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cuboid_Internal( new Vector3( size, size, size ), color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cube with a given size</summary><param name="size"></param>
		public static void Cube( float size ) => Cuboid_Internal( new Vector3( size, size, size ), Color );
		/// <summary>Draws a 3D cube with a given size</summary><param name="size"></param><param name="color">The color of the cube</param>
		public static void Cube( float size, Color color ) => Cuboid_Internal( new Vector3( size, size, size ), color );
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param>
		public static void Cone( Vector3 pos, float radius, float length ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cone_Internal( radius, length, true, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param>
		public static void Cone( Vector3 pos, float radius, float length, bool fillCap ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cone_Internal( radius, length, fillCap, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="color">The color of the cone</param>
		public static void Cone( Vector3 pos, float radius, float length, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cone_Internal( radius, length, true, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param><param name="color">The color of the cone</param>
		public static void Cone( Vector3 pos, float radius, float length, bool fillCap, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Cone_Internal( radius, length, fillCap, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="normal">The normal direction of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param>
		public static void Cone( Vector3 pos, Vector3 normal, float radius, float length ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cone_Internal( radius, length, true, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="normal">The normal direction of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param>
		public static void Cone( Vector3 pos, Vector3 normal, float radius, float length, bool fillCap ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cone_Internal( radius, length, fillCap, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="normal">The normal direction of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="color">The color of the cone</param>
		public static void Cone( Vector3 pos, Vector3 normal, float radius, float length, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cone_Internal( radius, length, true, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="normal">The normal direction of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param><param name="color">The color of the cone</param>
		public static void Cone( Vector3 pos, Vector3 normal, float radius, float length, bool fillCap, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Cone_Internal( radius, length, fillCap, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="rot">The orientation of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param>
		public static void Cone( Vector3 pos, Quaternion rot, float radius, float length ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cone_Internal( radius, length, true, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="rot">The orientation of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param>
		public static void Cone( Vector3 pos, Quaternion rot, float radius, float length, bool fillCap ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cone_Internal( radius, length, fillCap, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="rot">The orientation of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="color">The color of the cone</param>
		public static void Cone( Vector3 pos, Quaternion rot, float radius, float length, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cone_Internal( radius, length, true, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="pos">The position of the cone</param><param name="rot">The orientation of the cone</param><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param><param name="color">The color of the cone</param>
		public static void Cone( Vector3 pos, Quaternion rot, float radius, float length, bool fillCap, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Cone_Internal( radius, length, fillCap, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param>
		public static void Cone( float radius, float length ) => Cone_Internal( radius, length, true, Color );
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param>
		public static void Cone( float radius, float length, bool fillCap ) => Cone_Internal( radius, length, fillCap, Color );
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="color">The color of the cone</param>
		public static void Cone( float radius, float length, Color color ) => Cone_Internal( radius, length, true, color );
		/// <summary>Draws a 3D cone with a given radius and length</summary><param name="radius">The radius of the base of the cone</param><param name="length">The length/height of the cone</param><param name="fillCap">Whether or not the base cap should be filled or hollow</param><param name="color">The color of the cone</param>
		public static void Cone( float radius, float length, bool fillCap, Color color ) => Cone_Internal( radius, length, fillCap, color );
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param>
		public static void Torus( Vector3 pos, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Torus_Internal( radius, thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="color">The color of the torus</param>
		public static void Torus( Vector3 pos, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Torus_Internal( radius, thickness, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="normal">The normal direction of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param>
		public static void Torus( Vector3 pos, Vector3 normal, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Torus_Internal( radius, thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="normal">The normal direction of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="color">The color of the torus</param>
		public static void Torus( Vector3 pos, Vector3 normal, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Torus_Internal( radius, thickness, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="rot">The orientation of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param>
		public static void Torus( Vector3 pos, Quaternion rot, float radius, float thickness ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Torus_Internal( radius, thickness, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="pos">The position of the torus</param><param name="rot">The orientation of the torus</param><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="color">The color of the torus</param>
		public static void Torus( Vector3 pos, Quaternion rot, float radius, float thickness, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Torus_Internal( radius, thickness, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param>
		public static void Torus( float radius, float thickness ) => Torus_Internal( radius, thickness, Color );
		/// <summary>Draws a 3D torus with a given radius and thickness</summary><param name="radius">The radius of this torus</param><param name="thickness">The thickness of the torus</param><param name="color">The color of the torus</param>
		public static void Torus( float radius, float thickness, Color color ) => Torus_Internal( radius, thickness, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param>
		public static void Text( Vector3 pos, string content ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		public static void Text( Vector3 pos, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		public static void Text( Vector3 pos, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		public static void Text( Vector3 pos, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Text_Internal( content, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param>
		public static void Text( Vector3 pos, Vector3 normal, string content ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="normal">The normal direction of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Vector3 normal, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, Quaternion.LookRotation( normal ), Vector3.one );
			Text_Internal( content, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param>
		public static void Text( Vector3 pos, Quaternion rot, string content ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="rot">The orientation of the text</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, Quaternion rot, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Matrix *= Matrix4x4.TRS( pos, rot, Vector3.one );
			Text_Internal( content, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param>
		public static void Text( Vector3 pos, float angle, string content ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, Font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		public static void Text( Vector3 pos, float angle, string content, TextAlign align ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, Font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		public static void Text( Vector3 pos, float angle, string content, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, Font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		public static void Text( Vector3 pos, float angle, string content, TextAlign align, float fontSize ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, Font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, float angle, string content, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, font, FontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, float angle, string content, TextAlign align, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, font, FontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, float angle, string content, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, font, fontSize, TextAlign, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( Vector3 pos, float angle, string content, TextAlign align, float fontSize, TMP_FontAsset font ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, font, fontSize, align, Color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, float angle, string content, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, Font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, float angle, string content, TextAlign align, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, Font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, float angle, string content, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, Font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, float angle, string content, TextAlign align, float fontSize, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, Font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, float angle, string content, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, font, FontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, float angle, string content, TextAlign align, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, font, FontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, float angle, string content, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, font, fontSize, TextAlign, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="pos">The position of the text</param><param name="angle">The angular offset of the text, in radians</param><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( Vector3 pos, float angle, string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) {
			Draw.PushMatrix();
			Draw.Translate( pos );
			Draw.Rotate( angle );
			Text_Internal( content, font, fontSize, align, color );
			Draw.PopMatrix();
		}
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param>
		public static void Text( string content ) => Text_Internal( content, Font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param>
		public static void Text( string content, TextAlign align ) => Text_Internal( content, Font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param>
		public static void Text( string content, float fontSize ) => Text_Internal( content, Font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param>
		public static void Text( string content, TextAlign align, float fontSize ) => Text_Internal( content, Font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="font">The font to use</param>
		public static void Text( string content, TMP_FontAsset font ) => Text_Internal( content, font, FontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( string content, TextAlign align, TMP_FontAsset font ) => Text_Internal( content, font, FontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( string content, float fontSize, TMP_FontAsset font ) => Text_Internal( content, font, fontSize, TextAlign, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param>
		public static void Text( string content, TextAlign align, float fontSize, TMP_FontAsset font ) => Text_Internal( content, font, fontSize, align, Color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="color">The color of the text</param>
		public static void Text( string content, Color color ) => Text_Internal( content, Font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( string content, TextAlign align, Color color ) => Text_Internal( content, Font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( string content, float fontSize, Color color ) => Text_Internal( content, Font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="color">The color of the text</param>
		public static void Text( string content, TextAlign align, float fontSize, Color color ) => Text_Internal( content, Font, fontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( string content, TMP_FontAsset font, Color color ) => Text_Internal( content, font, FontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( string content, TextAlign align, TMP_FontAsset font, Color color ) => Text_Internal( content, font, FontSize, align, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( string content, float fontSize, TMP_FontAsset font, Color color ) => Text_Internal( content, font, fontSize, TextAlign, color );
		/// <summary>Draws text using Text Mesh Pro</summary><param name="content">The text to display</param><param name="align">The text alignment to use</param><param name="fontSize">The text alignment to use</param><param name="font">The font to use</param><param name="color">The color of the text</param>
		public static void Text( string content, TextAlign align, float fontSize, TMP_FontAsset font, Color color ) => Text_Internal( content, font, fontSize, align, color );
	}

}
